---
<%
  bind_host = nil
  if_p("advertised_hostname") do |advertised_hostname|
    bind_host = advertised_hostname
  end
  require 'json'

  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    unless network
      _, network = networks.first
    end
    unless network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
  bind_host ||= discover_external_ip
-%>
broker:
  username: <%= p("username") %>
  password: <%= p("password") %>
  port: <%= p("port") %>
  bind_host: <%= bind_host %>

cells:
<%
  cells = link("cell")
  cells.instances.map do |instance|
-%>
- guid: <%= instance.address %>
  uri: <%= instance.address %>
  availability_zone: <%= instance.az || "z1" %>
  username: <%= cells.p('username') %>
  password: <%= cells.p('password') %>
<% end -%>
<%
  if_link("cell_z2") do |cells|
    cells.instances.map do |instance|
-%>
- guid: <%= instance.address %>
  uri: <%= instance.address %>
  availability_zone: z2
  username: <%= cells.p('username') %>
  password: <%= cells.p('password') %>
<% end; end -%>

<%
  etcd_machine = nil
  if_p("etcd.machines") do |machines|
    etcd_machine = machines.first
  end
  etcd_machine ||= link("etcd").instances.first.address

  etcd_endpoints = ["http://#{etcd_machine}:4001"]
-%>
etcd:
  machines: <%= etcd_endpoints.to_json %>

<% if_p("backups.clusterdata.aws_access_key_id") do |aws_access_key_id| %>
callbacks:
  clusterdata_backup: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_backup.sh}
  clusterdata_restore: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_restore.sh}
  clusterdata_find_by_name: {cmd: /var/vcap/jobs/broker/bin/clusterdata_callback_find_by_name.sh}
  backups_copy: {cmd: /var/vcap/jobs/broker/bin/backups_copy.sh}
<% end %>

<% if_p("backups.database_storage.bucket_name") do |bucket_name| %>
backups:
  base_uri: s3://<%= bucket_name %>/backups
<% end %>

<% if_p("cf.api_url", "cf.username", "cf.password") do |api_url, username, password| %>
cf:
  api_url: <%= api_url %>
  username: <%= username %>
  password: <%= password %>
  skip_ssl_validation: <%= p("cf.skip_ssl_validation") %>
<% end %>

<%
  catalog_services = nil
  if_p("services") do |services|
    catalog_services = services
  end
  catalog_services ||= link("cell").p("services")
-%>
catalog:
  services: <%= JSON.pretty_generate(catalog_services) %>
