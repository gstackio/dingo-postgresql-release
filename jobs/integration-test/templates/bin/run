#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -o pipefail
set -u # report the usage of uninitialized variables
set -x # print commands

# pipe stderr to stdout so it all reads chronologically
exec 2>&1
# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/integration-test/helpers/ctl_setup.sh 'integration-test'
export PATH=/var/vcap/jobs/integration-test/bin:$PATH

# Force mtu of 1500 incase icmp is blocked by sg/acl prohibiting mtu discovery
sudo ip link show | grep eth0 && sudo ip link set dev eth0 mtu 1500

service=<%= p("cf.integration_test.service_name") %>
plans=(cluster)

<%
  # TODO: specific consumes: {name: cf} rather that getting from 'servicebroker'
  cf = link("servicebroker")
  cf.if_p("cf.api_url", "cf.username", "cf.password") do |api_url, username, password|
-%>
echo Logging into Cloud Foundry

set +x
echo cf login -a <%= api_url %> -u <%= username %> -p [REDACTED] <%= cf.p("cf.skip_ssl_validation") ? "--skip-ssl-validation" : "" %>
cf api "<%= api_url %>" <%= cf.p("cf.skip_ssl_validation") ? "--skip-ssl-validation" : "" %>
cf auth "<%= username %>" "<%= password %>"
set -x

set +e
cf create-org <%= p("cf.integration_test.organization") %>; cf target -o <%= p("cf.integration_test.organization") %>
cf create-space <%= p("cf.integration_test.space") %>

set -e
cf target -s <%= p("cf.integration_test.space") %>

<% end.else do %>
echo Cannot run integration-test without cf.api_url
exit 1
<% end %>

cf marketplace -s ${service}

for plan in ${plans[@]}; do
  name=DP-$(date +"%s" | rev)
  service_key=${name}-creds
  credentials=$(cf-create-service $service $plan $name $service_key)

  set +x
  echo $credentials
  uri=$(echo $credentials | jq -r ".uri")
  echo $uri
  set -x

  expected_value_stored="stored-value-${name}"
  test-storage $uri $expected_value_stored

  # prepare DB for cloning; ensure latest changes are sent out to backup
  superuser_uri=$(echo $credentials | jq -r ".superuser_uri")
  psql ${superuser_uri} -c "select pg_switch_xlog();"
  sleep 10

  test-clone-from-latest-by-name $service $plan $name $expected_value_stored

  cf delete-service-key $name $service_key -f
  cf delete-service $name -f
done

echo "Errand integration-test is complete"
