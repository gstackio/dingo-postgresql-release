meta:
  broker:
    username: starkandwayne
    password: starkandwayne

releases:
- name: dingo-postgresql
  version: latest
- name: simple-remote-syslog
  version: latest

instance_groups:
  - name: cell_z1
    instances: 2
    jobs: (( params "need a list of jobs" ))
    resource_pool: cell_z1
    networks: [{name: patroni1}]
    persistent_disk: 10240
  - name: cell_z2
    instances: 2
    jobs: (( params "need a list of jobs" ))
    resource_pool: cell_z2
    networks: [{name: patroni2}]
    persistent_disk: 10240
  - name: router
    instances: 1
    jobs:
      - name: remote-syslog
        release: simple-remote-syslog
      - name: broker
        release: dingo-postgresql
        properties:
          username: (( grab meta.broker.username ))
          password: (( grab meta.broker.password ))
          advertised_hostname: (( param "please provide public hostname for routers" ))
          etcd:
            machines: (( grab properties.etcd.machines ))
        consumes:
          cell: {from: cell_az1}
          cell_z2: {from: cell_az2}
      - name: router
        release: dingo-postgresql
      - name: dpg-cli
        release: dingo-postgresql
    resource_pool: router_z1
    networks: [{name: router1}]
  - name: sanity-test
    instances: 1
    lifecycle: errand
    jobs:
    - name: sanity-test
      release: dingo-postgresql
      properties:
        etcd:
          machines: (( grab properties.etcd.machines ))
    resource_pool: router_z1
    networks: [{name: router1}]
  - name: disaster-recovery
    instances: 1
    lifecycle: errand
    jobs:
    - name: disaster-recovery
      release: dingo-postgresql
    resource_pool: router_z1
    networks: [{name: patroni1}]

resource_pools:
  - name: cell_z1
    stemcell: (( grab meta.stemcell ))
    cloud_properties: (( param "please provide cloud_properties"))
    network: patroni1
  - name: cell_z2
    stemcell: (( grab meta.stemcell ))
    cloud_properties: (( param "please provide cloud_properties"))
    network: patroni2
  - name: router_z1
    stemcell: (( grab meta.stemcell ))
    cloud_properties: (( param "please provide cloud_properties"))
    network: router1

networks:
- name: patroni1
- name: patroni2
- name: router1

properties:
  etcd:
    machines: (( param "please provide array of etcd hostnames" ))
