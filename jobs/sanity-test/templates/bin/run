#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -o pipefail
set -u # report the usage of uninitialized variables
set -x # print commands

# pipe stderr to stdout so it all reads chronologically
exec 2>&1
# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/sanity-test/helpers/ctl_setup.sh 'sanity-test'
export PATH=/var/vcap/jobs/sanity-test/bin:$PATH

check-object-store
check-etcd

# Force mtu of 1500 incase icmp is blocked by sg/acl prohibiting mtu discovery
sudo ip link show | grep eth0 && sudo ip link set dev eth0 mtu 1500

<%
  broker = link("servicebroker")
	broker_machine = broker.instances.first.address
-%>
export BROKER_URI=http://<%= broker.p("username") %>:<%= broker.p("password") %>@<%= broker_machine %>:<%= broker.p("port") %>

<%
	etcd_machine = nil
	if_p("etcd.machines") do |machines|
		etcd_machine = machines.first
	end
	unless etcd_machine
		etcd_machine = link("etcd").instances.first.address
	end
-%>
export ETCD=<%= etcd_machine %>:4001

echo Confirm broker access
curl -v ${BROKER_URI}/v2/catalog

service_id=$(curl -sf ${BROKER_URI}/v2/catalog | jq -r ".services[0].id")
plan_ids=$(curl -sf ${BROKER_URI}/v2/catalog | jq -r ".services[0].plans[].id")
instance_id=T-$(date +"%s" | rev)
binding_id=B-$(date +"%s" | rev)

for plan_id in ${plan_ids[@]}; do

  credentials=$(create-service $service_id $plan_id $instance_id $binding_id)
  uri=$(echo $credentials | jq -r ".credentials.uri")

  echo Giving confd some time
  sleep 10

  test-storage $uri
  test-replication $instance_id

  test-move $service_id $plan_id $instance_id $uri
  test-storage $uri

  test-failure-recovery $service_id $plan_id $instance_id $binding_id $uri
  test-storage $uri
  test-replication $instance_id

  delete-service $service_id $plan_id $instance_id $binding_id
done

echo "Errand sanity-test is complete"
