#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/container-env-vars/helpers/ctl_setup.sh 'container-env-vars'

export PORT=${PORT:-5000}
export LANG=en_US.UTF-8

<%
  require 'json'

  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    if !network
      _, network = networks.first
    end
    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
-%>
case $1 in

  start)
    set +x
    pid_guard $PIDFILE $JOB_NAME

    # store pid in $PIDFILE
    echo $$ > $PIDFILE

    env_var_dir='<%= p("container_env_var_dir") %>'
    mkdir -p ${env_var_dir}
    rm -rf ${env_var_dir}/*

    # export DNS_DOMAIN_NAME=<%= (spec.dns_domain_name.nil? || spec.dns_domain_name == "") ? "bosh" : spec.dns_domain_name %>
    # export DOCKER_HOSTNAME="<%= index %>.<%= name %>.<%= spec.networks.methods(false).grep(/[^=]$/).first.to_s %>.<%= spec.deployment %>.$DNS_DOMAIN_NAME"
    export DOCKER_HOSTNAME="<%= discover_external_ip %>"
    echo ${DOCKER_HOSTNAME} > ${env_var_dir}/DOCKER_HOSTNAME

    export CELL_GUID="<%= discover_external_ip %>"
    echo ${CELL_GUID} > ${env_var_dir}/CELL_GUID

    <% if_link("etcd") do |etcd| -%>
    export ETCD_HOST_PORT=<%= etcd.instances.first.address %>:4001
    echo ${ETCD_HOST_PORT} > ${env_var_dir}/ETCD_HOST_PORT
    <% end -%>
    <% if_p("etcd.machines") do |machines| -%>
    export ETCD_HOST_PORT=<%= machines.first %>:4001
    echo ${ETCD_HOST_PORT} > ${env_var_dir}/ETCD_HOST_PORT
    <% end -%>

    # do nothing forever
    exec tail -f /dev/null

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;
  *)
    echo "Usage: ctl {start|stop}"

    ;;

esac
exit 0
